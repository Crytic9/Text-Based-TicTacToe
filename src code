# Text-Based-TicTacToe

class TicTacToe:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.players = ['X', 'O']
        self.current_player_index = 0

    def play(self):
        while not self.game_over():
            self.print_board()
            row, col = self.get_player_move()
            self.make_move(row, col)
            self.change_player()

        self.print_board()
        if self.winner() is None:
            print("It's a draw!")
        else:
            print(f"{self.winner()} wins!")

    def game_over(self):
        return self.winner() is not None or self.is_full()

    def winner(self):
        # Check rows
        for row in self.board:
            if row[0] != ' ' and all(cell == row[0] for cell in row):
                return row[0]

        # Check columns
        for col in range(3):
            if self.board[0][col] != ' ' and all(self.board[row][col] == self.board[0][col] for row in range(3)):
                return self.board[0][col]

        # Check diagonals
        if self.board[0][0] != ' ' and self.board[0][0] == self.board[1][1] == self.board[2][2]:
            return self.board[0][0]
        if self.board[0][2] != ' ' and self.board[0][2] == self.board[1][1] == self.board[2][0]:
            return self.board[0][2]

        return None

    def is_full(self):
        return all(cell != ' ' for row in self.board for cell in row)

    def get_player_move(self):
        while True:
            try:
                row = int(input("Enter row (0-2): "))
                col = int(input("Enter col (0-2): "))
                if 0 <= row < 3 and 0 <= col < 3 and self.board[row][col] == ' ':
                    return row, col
                else:
                    print("Invalid move. Try again.")
            except ValueError:
                print("Invalid input. Try again.")

    def make_move(self, row, col):
        self.board[row][col] = self.players[self.current_player_index]

    def change_player(self):
        self.current_player_index = (self.current_player_index + 1) % 2

    def print_board(self):
        for row in self.board:
            print("|".join(row))

if __name__ == '__main__':
    game = TicTacToe()
    game.play()
